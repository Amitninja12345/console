[
"<p>The overall system configuration. Gives access to the main configuration profiles that can be applied to server groups.</p>\n\n<p>View and modify the configuration for each available <strong>subsystem</strong>. For example, add a datasource, configure a messaging provider, or set up application security.</p>\n\n<p>Related Links</p>\n<ul>\n    <li><a href=\"#runtime\">Domain Runtime</a></li>\n</ul>",
"<p>Configure subsystems and global resources such as interfaces, socket bindings, paths and system properties.</p>\n\n<p>View and modify the configuration for each available <strong>subsystem</strong>. For example, add a datasource, configure a messaging provider, or set up application security.</p>\n\n<p>Related Links</p>\n<ul>\n    <li><a href=\"#/runtime\">Server Runtime</a></li>\n</ul>",
"<p>The content repository holds all content uploaded to the domain controller. After being uploaded the content can be assigned to a server group.</p>\n<p id=\"drag-and-drop-deployment\">You can use\n    <strong>drag and drop</strong> to add new content or replace existing deployments. Simply drag one or several files onto the column. If there's already a deployment with the same name, the deployment will be replaced, otherwise the deployment will be added.\n</p>\n<p>If a deployment is no longer assigned to a server group, you can remove the deployment again.</p>",
"<p>The datasource subsystem allows you to create and configure datasources and manage JDBC database drivers.</p>\n<h2>Datasources</h2>\n<p>The two general types of resources are referred to as datasources and XA datasources.\n<ul>\n    <li><strong>Non-XA datasources</strong> are used for applications which do not use transactions, or applications which use transactions with a single database.</li>\n    <li><strong>XA datasources</strong> are used by applications whose transactions are distributed across multiple databases. XA datasources introduce additional overhead.</li>\n</ul>\n<h2>JDBC Drivers</h2>\n<p>Before your application can connect to a datasource, your datasource vendor's JDBC drivers need to be installed. You can choose between two different ways to install JDBC drivers:</p>\n<dl>\n    <dt>Modules</dt>\n    <dd><p>To install a JDBC driver as a module you need to create a file path structure under the\n        <code>WILDFLY_HOME/modules</code>, copy the JDBC driver JAR into the\n        <code>main/</code> subdirectory and create a <code>module.xml</code> file.</p>\n        <p>Once the JDBC driver is available as a module you can use this section to add and remove driver configurations.</p>\n    </dd>\n\n    <dt>Deployments</dt>\n    <dd>\n        <p>You can deploy JDBC drivers just like any other deployment. This means that you can deploy them across multiple servers in a server group, if you use a managed domain. Any JDBC 4-compliant driver will automatically be recognized and installed into the system by name and version.</p>\n        <p>In domain mode drivers deployed as applications will only show up in this section if there are running servers which match the selected profile.</p>\n    </dd>\n</dl>\n",
"<p>The two general types of resources are referred to as datasources and XA datasources.\n<ul>\n    <li><strong>Non-XA datasources</strong> are used for applications which do not use transactions, or applications which use transactions with a single database.</li>\n    <li><strong>XA datasources</strong> are used by applications whose transactions are distributed across multiple databases. XA datasources introduce additional overhead.</li>\n</ul>\n",
"<p>A <strong>deployment</strong> is any resource, such a WAR or EAR application, that can be deployed to a server.</p>\n\n<p>In a managed domain, deployments are assigned to server groups. All server instances within a server group will have the same deployment content.</p>\n\n<img class=\"preview\" src=\"previews/deployments.png\"/>",
"<p>Manage deployments that have been assigned to one or more server groups.</p>\n<p>Upload a new deployment, create an unmanaged deployment, or choose a deployment from the content repository. Enable or unassign deployments.</p>\n",
"<p>A deployment represents anything that can be deployed (e.g. an application such as EJB-JAR, WAR, EAR, any kind of standard archive such as RAR or JBoss-specific deployment) into a server.</p>\n<p id=\"drag-and-drop-deployment\">You can use\n    <strong>drag and drop</strong> to add new content or replace existing deployments. Simply drag one or several files onto the column. If there's already a deployment with the same name, the deployment will be replaced, otherwise the deployment will be added.\n</p>\n",
"<p>The EE subsystem provides common functionality in the Java EE platform, such as the EE Concurrency Utilities (JSR 236) and <code>@Resource</code> injection. The subsystem is also responsible for managing the lifecycle of Java EE application's deployments, that is, .ear files.</p>\n<p>The EE subsystem configuration may be used to:</p>\n<ul>\n    <li>Allows the customisation of the deployment behaviour for Java EE Applications.</li>\n    <li>Manage Global modules: a set of JBoss Modules that will be added as dependencies to the JBoss Module of every Java EE deployment. Such dependencies allows Java EE deployments to see the classes exported by the global modules.</li>\n    <li>Manage EE Concurrency Utilities (JSR 236): It was introduced with Java EE 7, to ease the task of writing multithreaded Java EE applications. Instances of these utilities are managed by WildFly, and the related configuration provided by the EE subsystem.</li>\n</ul>",
"<p>A logical name for a network interface / IP address / host name to which sockets can be bound. The <code>domain.xml</code>, <code>host.xml</code> and <code>standalone.xml</code> configurations all include a section where interfaces can be declared. Other sections of the configuration can then reference those interfaces by their logical name, rather than having to include the full details of the interface (which may vary on different machines).</p>\n\n<p>An interface configuration includes the logical name of the interface as well as information specifying the criteria to use for resolving the actual physical address to use.</p>",
"<p>Before your application can connect to a datasource, your datasource vendor's JDBC drivers need to be installed. You can choose between two different ways to install JDBC drivers:</p>\n<dl>\n    <dt>Modules</dt>\n    <dd><p>To install a JDBC driver as a module you need to create a file path structure under the\n        <code>WILDFLY_HOME/modules</code>, copy the JDBC driver JAR into the\n        <code>main/</code> subdirectory and create a <code>module.xml</code> file.</p>\n        <p>Once the JDBC driver is available as a module you can use this section to add, modify and remove driver configurations.</p>\n    </dd>\n\n    <dt>Deployments</dt>\n    <dd>\n        <p>You can deploy JDBC drivers just like any other deployment. This means that you can deploy them across multiple servers in a server group, if you use a managed domain. Any JDBC 4-compliant driver will automatically be recognized and installed into the system by name and version.</p>\n        <p>In domain mode drivers deployed as applications will only show up in this section if there are running servers which match the selected profile.</p>\n    </dd>\n</dl>\n",
"<p>The Mail subsystem allows you to configure separate mail settings, that is named mail-session. A mail session can have only three types of servers: IMAP, POP, SMTP.</p>\n<p>Each service references an existing outbound socket binding <code>outbound-socket-binding</code> (see <a href=\"#configuration;path=configuration%255C2socket-bindings\">Socket Binding Groups</a>).</p>\n",
"<p>A logical name for a filesystem path. The <code>domain.xml</code>, <code>host.xml</code> and <code>standalone.xml</code> configurations all include a section where paths can be declared. Other sections of the configuration can then reference those paths by their logical name, rather than having to include the full details of the path (which may vary on different machines).</p>\n\n<p>For example, the logging subsystem configuration includes a reference to the <code>jboss.server.log.dir</code> path that points to the server&#39;s <code>log</code> directory.</p>",
"<p>A profile is named set of subsystems along with each subsystemâ€™s configurations. A subsystem is an additional set of capabilities added to the core server by an extension. Subsystems provide capabilities like servlet handling capabilities, an EJB container, JTA, etc.\n\n<p>Different profiles can be defined to address the specific needs of different server groups.</p>\n\n<img class=\"preview\" src=\"previews/profiles.png\"/>",
"<p>A domain consists of one domain controller, one or more host controller(s), and zero or more server groups per host.</p>\n<p>A domain controller is the central point from which the domain is controlled. It ensures that each server is configured according to the management policy of the domain. The domain controller is also a host controller.</p>\n<p>A host controller is a physical or virtual host on which the domain.sh or domain.bat script is run. Host controllers are configured to delegate domain management tasks to the domain controller. The host controller on each host interacts with the domain controller to control the lifecycle of the application server instances running on its host and to assist the domain controller to manage them. Each host can contain multiple server groups.</p>\n<p>A server group is a set of server instances which have JBoss EAP 6 installed on them and are managed and configured as one. The domain controller manages the configuration of and applications deployed onto server groups. Consequently, each server in a server group shares the same configuration and deployments.</p>\n",
"<p>View and monitor runtime services, like log files, JVM metrics and subsystem specific runtime data.</p>",
"<p>A socket binding is a named configuration for a socket. The <code>domain.xml</code> and <code>standalone.xml</code> configurations both include a section where named socket configurations can be declared. Other sections of the configuration can then reference those sockets by their logical name, rather than having to include the full details of the socket configuration (which may vary on different machines).</p>",
"<p>A set of subsystem configurations. A subsystem is an added set of capabilities added to the core server by an extension. As such a subsystem provides servlet handling capabilities, an EJB container, JTA support, etc.</p>",
"<p>System property values can be set in a number of places in <code>domain.xml</code>, <code>host.xml</code> and <code>standalone.xml</code>. The values in <code>standalone.xml</code> are set as part of the server boot process. Values in <code>domain.xml</code> and <code>host.xml</code> are applied to servers when they are launched.</p>"]